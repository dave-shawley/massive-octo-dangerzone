"""
Simplified user input interface.
--------------------------------

- :func:`get_age` - prompt for a age value
- :func:`get_date` - prompt for a formatted date value
- :func:`get_gender` - prompt for *male* or *female*
- :func:`get_location` - retrieve a full location
- :func:`ask_yes_no` - prompt for a *yes/no* answer
- :func:`prompt` - the workhorse of the interface
- :func:`show` - display a message

This module implements a primitive console-based user interface
that is used in the command line tools.  The functions prefixed
with ``get_`` should be used whenever you need to prompt the user
for a specific type of input.  :func:`ask_yes_no` can be used to
prompt for a *yes or no* type of answer.  These are all simply
wrappers over the general :func:`prompt` function which is a
little more difficult to call since it involves using the
:mod:`validation helpers <familytree.cli.validators>`.

"""
import sys

from . import validators


def prompt(fmt, *args, validator=None,
           none_on_eof=False, none_on_empty=False, allow_empty=False):
    """Prompt for input and optionally validate it.

    :param fmt: format for the prompt
    :param args: arguments to pass into the prompt format
    :param validator: optional ``callable`` that is invoked to
        validate and/or transform the input
    :param none_on_eof: if :data:`True`, then :data:`None` is
        returned if the user enters the end-of-file character
        (:kbd:`Ctrl+D`) at the prompt
    :param none_on_empty: if :data:`True`, then :data:`None` is
        returned if the user enters an empty string
    :param allow_empty: if :data:`True`, then an empty string is
        considered a valid value

    :return: the sanitized result
    :raises: :exc:`~exceptions.SystemExit` if the user requests
        the program to exit by pressing :kbd:`Ctrl+D` or :kbd:`Ctrl+C`

    The prompt is generated by calling ``str.format(fmt, *args)``
    and appending a colon.  If a validator is specified, then it
    is called with the input value and should return a possibly
    transformed version of it or raise a
    :exc:`~familytree.cli.validators.ValidationError` instance.
    If a validation error occurs, then the prompt is reissued and
    the cycle continues.

    """

    if none_on_empty:
        allow_empty = True

    result = None
    while result is None:
        try:
            result = input(fmt.format(*args) + ': ').strip()

            if validator is not None:
                try:
                    result = validator(result)
                except ValueError as error:
                    raise validators.ValidationError(cause=error)

            if result == '' and not allow_empty:
                raise validators.ValidationError(
                    message='Empty values are not allowed')

        except validators.ValidationError as error:
            print(error)
            result = None
        except EOFError:
            if none_on_eof:
                break
            sys.exit(-1)
        except KeyboardInterrupt:
            sys.exit(-1)

    if result == '' and none_on_empty:
        result = None

    return result


def ask_yes_no(question, **kwargs):
    """Ask a yes/no question.

    :returns: ``True`` or ``False``

    """
    return prompt('{0}? [yn]', question, validator=validators.yes_no, **kwargs)


def get_age(prompt_):
    """Prompt for an age.

    :returns: the number of years as a ``float``

    """
    return prompt('{0}', prompt_, validator=validators.age)


def get_date(prompt_, date_format, **kwargs):
    """Prompt for a date.

    :param str date_format: input format string passed to
        :meth:`~datetime.datetime.strptime`

    :returns: a ``datetime`` value

    """
    return prompt(
        '{0}', prompt_, validator=validators.date(date_format), **kwargs)


def get_gender(**kwargs):
    """Prompt for a gender.

    :returns: ``male`` or ``female``

    """
    return prompt('Gender', validator=validators.gender, **kwargs)


def get_location(prefix):
    """Retrieve a location.

    :returns: a ``dict`` containing ``place``, ``county``,
        ``state``, and ``country`` keys

    """
    return {
        'place': prompt('{0} place', prefix),
        'county': prompt('{0} county', prefix,
                         allow_empty=True, none_on_empty=True),
        'state': prompt('{0} state', prefix,
                        allow_empty=True, none_on_empty=True),
        'country': 'USA',
    }


def show(fmt, *args):
    """Print a message to the console."""
    print(fmt.format(*args))
